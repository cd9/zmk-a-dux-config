/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
  flavor = "balanced";
  tapping_term_ms = <125>;
  quick_tap_ms = <200>;
};

&lt {
  flavor = "balanced";
  tapping_term_ms = <125>;
  quick_tap_ms = <200>;
};

&mwh {
  delay-ms = <0>;
  time-to-max-speed-ms=<10>;
  acceleration-exponent=<1>;
};

#define U_MOUSE_SCROLL_MAX 200
#undef SCROLL_UP
#undef SCROLL_DOWN
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)

/ {
 combos {
   compatible = "zmk,combos";
   combo_enter_1 {
    timeout-ms = <50>;
    key-positions = <5 6>;
    bindings = <&kp RET>;
   };
   combo_enter_2 {
    timeout-ms = <50>;
    key-positions = <13 16>;
    bindings = <&kp RET>;
   };

   // layer key symbol combos
   combo_plus {
    timeout-ms = <50>;
    key-positions = <32 19>;
    bindings = <&kp PLUS>;
   };
   combo_minus {
    timeout-ms = <50>;
    key-positions = <32 18>;
    bindings = <&kp MINUS>;
   };
   combo_underscore {
    timeout-ms = <50>;
    key-positions = <32 15>;
    bindings = <&kp UNDER>;
   };
   combo_pipe {
    timeout-ms = <50>;
    key-positions = <32 15>;
    bindings = <&kp PIPE>;
   };
   combo_backslash {
    timeout-ms = <50>;
    key-positions = <32 15>;
    bindings = <&kp BSLH>;
   };
   combo_excl {
    timeout-ms = <50>;
    key-positions = <32 0>;
    bindings = <&kp EXCL>;
   };
   combo_at {
    timeout-ms = <50>;
    key-positions = <32 1>;
    bindings = <&kp AT>;
   };
   combo_hash {
    timeout-ms = <50>;
    key-positions = <32 2>;
    bindings = <&kp HASH>;
   };
   combo_dollar {
    timeout-ms = <50>;
    key-positions = <32 3>;
    bindings = <&kp DLLR>;
   };
   combo_prcnt {
    timeout-ms = <50>;
    key-positions = <32 4>;
    bindings = <&kp PRCNT>;
   };
   combo_caret {
    timeout-ms = <50>;
    key-positions = <32 5>;
    bindings = <&kp CARET>;
   };
   combo_ampersand {
    timeout-ms = <50>;
    key-positions = <32 6>;
    bindings = <&kp AMPS>;
   };
   combo_multiply {
    timeout-ms = <50>;
    key-positions = <32 7>;
    bindings = <&kp KP_MULTIPLY>;
   };
   combo_equals {
    timeout-ms = <50>;
    key-positions = <32 29>;
    bindings = <&kp EQUAL>;
   };

   //num combos
   combo_0 {
    timeout-ms = <50>;
    key-positions = <31 0>;
    bindings = <&kp 0>;
   };
   combo_1 {
    timeout-ms = <50>;
    key-positions = <31 1>;
    bindings = <&kp 1>;
   };
   combo_2 {
    timeout-ms = <50>;
    key-positions = <31 2>;
    bindings = <&kp 2>;
   };
   combo_3 {
    timeout-ms = <50>;
    key-positions = <31 3>;
    bindings = <&kp 3>;
   };
   combo_4 {
    timeout-ms = <50>;
    key-positions = <31 4>;
    bindings = <&kp 4>;
   };
   combo_5 {
    timeout-ms = <50>;
    key-positions = <31 5>;
    bindings = <&kp 5>;
   };
   combo_6 {
    timeout-ms = <50>;
    key-positions = <31 6>;
    bindings = <&kp 6>;
   };
   combo_7 {
    timeout-ms = <50>;
    key-positions = <31 7>;
    bindings = <&kp 7>;
   };
   combo_8 {
    timeout-ms = <50>;
    key-positions = <31 8>;
    bindings = <&kp 8>;
   };
   combo_9 {
    timeout-ms = <50>;
    key-positions = <31 9>;
    bindings = <&kp 9>;
   };

   combo_double_quote {
    timeout-ms = <50>;
    key-positions = <8 9>;
    bindings = <&kp DQT>;
   };
   combo_single_quote {
    timeout-ms = <50>;
    key-positions = <18 19>;
    bindings = <&kp SQT>;
   };
   combo_lt {
    timeout-ms = <50>;
    key-positions = <26 27>;
    bindings = <&kp LT>;
   };
   combo_gt {
    timeout-ms = <50>;
    key-positions = <27 28>;
    bindings = <&kp GT>;
   };
   combo_curly_left {
    timeout-ms = <50>;
    key-positions = <16 17>;
    bindings = <&kp LBRC>;
   };
   combo_curly_right {
    timeout-ms = <50>;
    key-positions = <17 18>;
    bindings = <&kp RBRC>;
   };
   combo_round_left {
    timeout-ms = <50>;
    key-positions = <6 7>;
    bindings = <&kp LPAR>;
   };
   combo_round_right {
    timeout-ms = <50>;
    key-positions = <7 8>;
    bindings = <&kp RPAR>;
   };
 };

 keymap {
  compatible = "zmk,keymap";

  base_layer {
    bindings = <
      &kp Q &kp W &kp E &kp R &kp T &lt 3 Y &kp U &kp I &kp O &lt 4 P
      &mt LCTRL A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &lt 3 L &mt LCTRL SEMI
      &mt LSHFT Z &kp X &kp C &kp V &kp B &lt 3 N &kp M &kp COMMA &kp DOT &mt RSHFT FSLH 
      &mt LGUI ESC &lt 1 TAB &lt 2 SPACE &mt RALT BSPC
    >;
  };

  lower_layer {
    bindings = <
      &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
      &trans &trans &trans &kp F &trans &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans
      &kp LSHFT &trans &trans &trans &trans &trans &trans &kp COMMA &kp DOT &kp RSHFT
      &trans &trans &trans &kp LGUI
    >;
  };

  upper_layer {
    bindings = <
      &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR &kp RPAR
      &kp GRAVE &kp TILDE &trans &trans &trans &kp UNDER &kp LBRC &kp RBRC &kp MINUS &kp PLUS
      &kp LSHFT &trans &trans &trans &trans &kp PIPE &kp LBKT &kp RBKT &kp BSLH &kp EQUAL
      &kp LGUI &trans &trans &trans
    >;
  };

  mouse_layer {
    bindings = <
      &trans &trans &mwh SCROLL_UP &mwh SCROLL_DOWN &trans &trans &mkp LCLK &mkp RCLK &trans &trans 
      &trans &trans &mkp RCLK &mkp LCLK &trans &trans &mkp LCLK &mkp RCLK &trans &trans 
      &trans &trans &trans &trans &trans &trans &mkp LCLK &mkp RCLK &trans &trans 
      &trans &trans &mkp LCLK &mkp RCLK
    >;
  };

  bluetooth_layer {
    bindings = <
      &bt BT_PRV &trans &trans &trans &trans &trans &trans &trans &trans &trans 
      &bt BT_NXT &trans &trans &trans &trans &trans &trans &trans &trans &trans 
      &bt BT_CLR &trans &trans &trans &trans &trans &trans &trans &trans &trans 
      &trans &trans &trans &trans
    >;
  };

 };
};
